[manifest]
version = "1.0.0"
dump_lua = true
priority = 1

# Game ends at below 0 hands instead of 1 when We Can Change Anything is active
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "G.STATE = G.STATES.NEW_ROUND"
position = "at"
payload = '''
if not G.GAME.lobc_maiden_active then
    G.STATE = G.STATES.NEW_ROUND
else
    G.STATE = G.STATES.DRAW_TO_HAND
end'''
match_indent = true

# Patches taken from Cryptid
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "elseif G.GAME.round_resets.blind == G.P_BLINDS.bl_big then"
position = "at"
payload = "elseif G.GAME.blind_on_deck == 'Big' then"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if G.GAME.round_resets.blind == G.P_BLINDS.bl_small then"
position = "at"
payload = "if G.GAME.blind_on_deck == 'Small' then"
match_indent = true

# Remove skipping for Ordeals
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "extras = create_UIBox_blind_tag(type, run_info)"
position = "at"
payload = '''
if not blind_choice.config.color and not G.GAME.modifiers.lobc_netzach then
    extras = create_UIBox_blind_tag(type, run_info)
end'''
match_indent = true

# For "Hands and Discards do not reset" effects
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "G.GAME.current_round.discards_left = math.max(0, G.GAME.round_resets.discards + G.GAME.round_bonus.discards)"
position = "before"
payload = "if not G.GAME.lobc_no_hands_reset then"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "G.GAME.current_round.hands_left = (math.max(1, G.GAME.round_resets.hands + G.GAME.round_bonus.next_hands))"
position = "after"
payload = '''
    if G.GAME.modifiers.lobc_netzach then
        G.GAME.current_round.hands_left = G.GAME.current_round.hands_left - (G.GAME.round_resets.ante > 6 and 2 or (G.GAME.round_resets.ante > 3 and 1 or 0))
        G.GAME.current_round.discards_left = G.GAME.current_round.discards_left - (G.GAME.round_resets.ante > 6 and 2 or (G.GAME.round_resets.ante > 3 and 1 or 0))
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "G.GAME.current_round.discards_left = math.max(0, G.GAME.round_resets.discards + G.GAME.round_bonus.discards)"
position = "before"
payload = "if not G.GAME.lobc_no_hands_reset or (G.GAME.lobc_no_hands_reset and G.GAME.round_resets.blind_states.Small ~= 'Defeated') then"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "G.GAME.current_round.hands_left = (math.max(1, G.GAME.round_resets.hands + G.GAME.round_bonus.next_hands))"
position = "after"
payload = '''
    if G.GAME.modifiers.lobc_netzach then
        G.GAME.current_round.hands_left = G.GAME.current_round.hands_left - (G.GAME.round_resets.ante > 6 and 2 or (G.GAME.round_resets.ante > 3 and 1 or 0))
        G.GAME.current_round.discards_left = G.GAME.current_round.discards_left - (G.GAME.round_resets.ante > 6 and 2 or (G.GAME.round_resets.ante > 3 and 1 or 0))
    end
end'''
match_indent = true

# Enchanted cards
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "hand_space = n"
position = 'before'
match_indent = true
payload = '''
for i = n+1, #G.deck.cards-1 do
    local card = G.deck.cards[#G.deck.cards-i]
    if card.edition and card.edition.card_limit and card.ability.big_bird_enchanted then
        n = n + 1
    end
end
for _, v in ipairs(G.discard.cards) do
    if v.edition and v.edition.card_limit and v.ability.big_bird_enchanted then
        n = n + 1
    end
end'''

# Skills
[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/overrides.lua"]'
pattern = 'elseif num_lines < #e.children then'
position = 'at'
match_indent = true
payload = "elseif num_lines + (G.skill_deck and 1 or 0) < #e.children then"

# Custom Debuff Text Display
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = 'if G.GAME.blind and G.boss_throw_hand and self.STATE == self.STATES.SELECTING_HAND then'
position = 'before'
match_indent = true
payload = '''
-- LobotomyCorp bosses' debuff text
if G.GAME.blind then
    -- SP Display
    if G.GAME.blind.p_sp and G.GAME.blind.b_sp then
        if (G.GAME.blind.prv_p_sp ~= G.GAME.blind.p_sp or G.GAME.blind.prv_b_sp ~= G.GAME.blind.b_sp) and self.sp_display_text then
            self.sp_display_text:remove()
            self.sp_display_text = nil
        end
        if not self.sp_display_text then
            self.sp_display_text = UIBox {
                definition =
                {n = G.UIT.ROOT, config = {align = 'cm', colour = G.C.CLEAR, padding = 0.2}, nodes = {
                    {n = G.UIT.R, config = {align = 'cm', maxw = 1}, nodes = {
                        {n = G.UIT.O, config = {object = DynaText({scale = 0.7, string = {localize{type = 'variable', key = 'lobc_sp', vars = {G.GAME.blind.p_sp, G.GAME.blind.b_sp, 100 + (G.GAME.blind.p_sp - G.GAME.blind.b_sp > 0 and 0 or G.GAME.blind.p_sp - G.GAME.blind.b_sp)}}}, maxw = 9, colours = { G.C.WHITE }, float = true, shadow = true, silent = true})}},
                    }},
                }},
                config = {
                    align = 'cm',
                    offset = {x = 0, y = -3.1},
                    major = G.play,
                }
            }
            self.sp_display_text.attention_text = true
            self.sp_display_text.states.collide.can = false
            G.GAME.blind.prv_p_sp = G.GAME.blind.p_sp
            G.GAME.blind.prv_b_sp = G.GAME.blind.b_sp
        end
    else
        if self.sp_display_text then 
            self.sp_display_text:remove()
            self.sp_display_text = nil
        end
    end
    -- Shield Display
    if G.GAME.blind.shield_value then
        if G.GAME.blind.prv_shield ~= G.GAME.blind.shield_value and self.shield_display_text then
            self.shield_display_text:remove()
            self.shield_display_text = nil
        end
        if not self.shield_display_text then
            self.shield_display_text = UIBox {
                definition =
                {n = G.UIT.ROOT, config = {align = 'cm', colour = G.C.CLEAR, padding = 0.2}, nodes = {
                    {n = G.UIT.R, config = {align = 'cm', maxw = 1}, nodes = {
                        {n = G.UIT.O, config = {object = DynaText({scale = 0.6, string = {localize{type = 'variable', key = 'lobc_shield', vars = {number_format(G.GAME.blind.shield_value)}}}, maxw = 9, colours = { G.C.BLUE }, float = true, shadow = true, silent = true})}},
                    }},
                }},
                config = {
                    align = 'cm',
                    offset = {x = 0, y = -2.3},
                    major = G.play,
                }
            }
            self.shield_display_text.attention_text = true
            self.shield_display_text.states.collide.can = false
            G.GAME.blind.prv_shield = G.GAME.blind.shield_value
        end
    else
        if self.shield_display_text then 
            self.shield_display_text:remove()
            self.shield_display_text = nil
        end
    end
    -- Update selected hand for Small Beak
    if G.beaked and self.STATE == self.STATES.SELECTING_HAND then
        if G.prv_beaked ~= G.beaked and self.boss_warning_text then
            self.boss_warning_text:remove()
            self.boss_warning_text = nil
        end
        if not self.boss_warning_text then
            self.boss_warning_text = UIBox{
                definition = 
                {n=G.UIT.ROOT, config = {align = 'cm', colour = G.C.CLEAR, padding = 0.2}, nodes={
                    {n=G.UIT.R, config = {align = 'cm', maxw = 1}, nodes={
                        {n=G.UIT.O, config={object = DynaText({scale = 0.7, string = localize('ph_unscored_hand'), maxw = 9, colours = {G.C.WHITE},float = true, shadow = true, silent = true, pop_in = 0, pop_in_rate = 6})}},
                    }},
                    {n=G.UIT.R, config = {align = 'cm', maxw = 1}, nodes={
                        {n=G.UIT.O, config={object = DynaText({scale = 0.6, string = SMODS.debuff_text or G.GAME.blind:get_loc_debuff_text(), maxw = 9, colours = {G.C.WHITE},float = true, shadow = true, silent = true, pop_in = 0, pop_in_rate = 6})}},
                    }}
                }}, 
                config = {
                    align = 'cm',
                    offset ={x=0,y=-3.1}, 
                    major = G.play,
                }
            }
            self.boss_warning_text.attention_text = true
            self.boss_warning_text.states.collide.can = false
            G.prv_beaked = G.beaked
        end
    elseif G.prv_beaked then
        if self.boss_warning_text then 
            self.boss_warning_text:remove()
            self.boss_warning_text = nil
        end
        G.prv_beaked = nil
    end
end'''

# Downgrade all hands
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = "if vals.StatusText then "
position = 'before'
match_indent = true
payload = "if vals.neg then col = G.C.RED end"

# Shield
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''if hand_chips*mult > 0 then 
        delay(0.8)
        G.E_MANAGER:add_event(Event({
        trigger = 'immediate',
        func = (function() play_sound('chips2');return true end)
        }))
    end'''
position = 'after'
match_indent = true
payload = '''
if G.GAME.blind.shield_value and hand_chips*mult > 0 then
    G.E_MANAGER:add_event(Event({
        trigger = 'ease',
        blocking = false,
        ref_table = G.GAME.blind,
        ref_value = 'shield_value',
        ease_to = math.max(G.GAME.blind.shield_value - hand_chips*mult, 0),
        delay =  0.5,
        func = (function(t) return math.floor(t) end)
    }))
end'''